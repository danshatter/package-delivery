openapi: '3.0.3'
info:
  title: Handova API
  description: Documentation for Handova Application
  version: '1.0'
servers:
  - url: https://handova.ddns.net
    description: Staging Environment
  - url: http://localhost:8000
    description: Development Environment
paths:
  /api/login:
    post:
      tags: [Authentication]
      summary: Login a user
      description: Login a user
      requestBody:
        description: Data for login a user
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  description: Phone number or email of the user
                  type: string
                  example: handova@example.com
                device_identification:
                  description: The ID of the device
                  type: string
                  example: w0pSP0GcwC55vRFZuLZkKmCEk1cH02SylzWFZNsX
                firebase_messaging_token:
                  description: Firebase token for push notifications
                  type: string
                  example: ujxPOCCBPk80wgTtafHjyGCbpqmG7uXkYEmynsWjsDL2lJEX6JGX9hR6UaykiNzsHZVIn32vQn3FEx8pDrSLhwz53zoOlgd8lbRZfuKKxwiBw13RBNcSzwYa9C4BusUddPfIO0sUgnSktW59yyidl3MOO4J344Pq
                password:
                  description: Password of the user
                  type: string
                  format: password
                  example: secret
              required: [username, device_identification, firebase_messaging_token, password]
        required: true
      responses:
        '200':
          description: Okay
        '400':
          description: Invalid username and password
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/login/google:
    post:
      tags: [Authentication]
      summary: Login a user with Google OAuth2
      description: Login a user with Google OAuth2
      requestBody:
        description: Data for login a user with Google OAuth2
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  description: The access token gotten from Google
                  type: string
                  example: ya29.A0ARrdaM9EzPJDjsjGTkd;leKK9NdQUvtUJyoEleH2g0M_y9vGVsZfKQxfvEY79hsU2JQAVZn05cvrpNpT321rjUKMHcx6Q2UDMrTQGHZ1iRFOBDoV-h8opXVXcyRl2-MS2uh3N1Q_VfW5T7luX0IQw5KHFTwR4
                device_identification:
                  description: The ID of the device
                  type: string
                  example: w0pSP0GcwC55vRFZuLZkKmCEk1cH02SylzWFZNsX
                firebase_messaging_token:
                  description: Firebase token for push notifications
                  type: string
                  example: ujxPOCCBPk80wgTtafHjyGCbpqmG7uXkYEmynsWjsDL2lJEX6JGX9hR6UaykiNzsHZVIn32vQn3FEx8pDrSLhwz53zoOlgd8lbRZfuKKxwiBw13RBNcSzwYa9C4BusUddPfIO0sUgnSktW59yyidl3MOO4J344Pq
              required: [access_token, device_identification, firebase_messaging_token]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Invalid credentials
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/login/facebook:
    post:
      tags: [Authentication]
      summary: Login a user with Facebook OAuth2
      description: Login a user with Facebook OAuth2
      requestBody:
        description: Data for login a user with Facebook OAuth2
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  description: The access token gotten from Facebook
                  type: string
                  example: EAAHZC8JgR96ABAJMRxzb9HkRGRyZAU2UFiH1wOwl1yMwwZBTFChocy867hhDmA8OijynZCLEhgqteXZApwvlmgbOHOkUpMR9TJcApsleKF5yVzfCX4WywE9nAcumZBEWhoNm1Nc0tzP3Sq1S1XKYLqwDq44fVthDhwX8Fy9JEo0OMD4ggfxngDZCxxEZAAsSWLKFVSCbszPUZCUeBkF8CS6YMJBHrBgZBiBwbWkfqq1Lm9Ux
                device_identification:
                  description: The ID of the device
                  type: string
                  example: w0pSP0GcwC55vRFZuLZkKmCEk1cH02SylzWFZNsX
                firebase_messaging_token:
                  description: Firebase token for push notifications
                  type: string
                  example: ujxPOCCBPk80wgTtafHjyGCbpqmG7uXkYEmynsWjsDL2lJEX6JGX9hR6UaykiNzsHZVIn32vQn3FEx8pDrSLhwz53zoOlgd8lbRZfuKKxwiBw13RBNcSzwYa9C4BusUddPfIO0sUgnSktW59yyidl3MOO4J344Pq
              required: [access_token, device_identification, firebase_messaging_token]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Access token error
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/forgot-password:
    post:
      tags: [Authentication]
      summary: Initiate the forgotten password process
      description: Initiate the forgotten password process
      requestBody:
        description: Data required to initiate forgotten password process
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: The email or phone of the user
                  type: string
                  example: user@handova.com
              required: [username]
        required: true
      responses:
        '200':
          description: Okay
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/reset-password:
    put:
      tags: [Authentication]
      summary: Reset a user's password
      description: Reset the password of a user
      requestBody:
        description: Data for password reset
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                phone:
                  description: Phone number of the user
                  type: string
                  example: '08111111111'
                password:
                  description: Password of username
                  type: string
                  format: password
                  example: secret
                password_confirmation:
                  description: Confirmation of password
                  type: string
                  format: password
                  example: secret
                otp:
                  description: The generated OTP
                  type: string
                  example: '9803'
              required: [phone, password, password_confirmation, otp]
        required: true
      responses:
        '200':
          description: Okay
        '400':
          description: Invalid OTP
        '403':
          description: Expired OTP
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/otp/resend:
    post:
      tags: [Authentication]
      summary: Resend an OTP
      description: Resend the OTP of a user
      requestBody:
        description: Data for resending OTP
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  description: Phone number of the user
                  type: string
              required: [phone]
              example:
                phone: '08111111111'
        required: true
      responses:
        '200':
          description: Okay
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/users/verify:
    put:
      tags: [Authentication]
      summary: Verify a user's account
      description: For the verification of a user's
      requestBody:
        description: Data for user verification
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  description: The phone number of the user
                  type: string
                  example: '08111111111'
                otp:
                  description: The generated OTP
                  type: string
                  example: '7379'
              required: [otp]
        required: true
      responses:
        '200':
          description: Okay
        '400':
          description: Invalid OTP
        '401':
          description: Unauthenticated
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/logout:
    post:
      tags: [Authentication]
      summary: Logout a user
      description: Logout the authenticated user
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/change-password:
    put:
      tags: [Authentication]
      summary: Change a user's password
      description: For changing a user's password
      requestBody:
        description: Data for changing password
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                current_password:
                  description: The current password of the user
                  type: string
                  format: password
                  example: secret
                password:
                  description: The new password of the user
                  type: string
                  format: password
                  example: secret
                password_confirmation:
                  description: The confirmation of the new password
                  type: string
                  format: password
                  example: secret
              required: [current_password, password, password_confirmation]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/users/profile:
    get:
      tags: [General]
      summary: Get user profile details
      description: Get all details of a user's profile
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/users/profile-image:
    post:
      tags: [General]
      summary: Upload profile image
      description: Upload a profile image for the authenticated user
      requestBody:
        description: Data for profile image
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: The profile image
                  format: binary
              required: [image]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/vehicles:
    get:
      tags: [General]
      summary: Get vehicle categories (Does not require authentication but checks if a user makes an authenticated requests)
      description: Get all vehicle categories and their data (Does not require authentication but checks if a user makes an authenticated requests)
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/vehicles/{vehicleId}:
    get:
      tags: [General]
      summary: Get a vehicle category (Does not require authentication but checks if a user makes an authenticated requests)
      description: Get a vehicle category and associated data (Does not require authentication but checks if a user makes an authenticated requests)
      parameters:
        - name: vehicleId
          in: path
          required: true
          description: The ID of the vehicle category
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Vehicle category not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/vehicles/{vehicleId}/brands:
    get:
      tags: [General]
      summary: Get brands of a vehicle category
      description: Get the brands of a vehicle category
      parameters:
        - name: vehicleId
          in: path
          required: true
          description: The ID of the vehicle category
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Vehicle category not found
        '500':
          description: Server error. Report to Developer
  /api/vehicle-brands:
    get:
      tags: [General]
      summary: Get vehicle brands
      description: Get the vehicle brands
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
  /api/vehicle-brands/{vehicleBrandId}:
    get:
      tags: [General]
      summary: Get a vehicle brand
      description: Get a vehicle brand
      parameters:
        - name: vehicleBrandId
          in: path
          required: true
          description: The ID of the vehicle brand
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Vehicle brand not found
        '500':
          description: Server error. Report to Developer
  /api/vehicle-brands/{vehicleBrandId}/models:
    get:
      tags: [General]
      summary: Get models of a vehicle brand
      description: Get the models of a vehicle brand
      parameters:
        - name: vehicleBrandId
          in: path
          required: true
          description: The ID of the vehicle brand
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Vehicle brand not found
        '500':
          description: Server error. Report to Developer
  /api/categories:
    get:
      tags: [General]
      summary: Get all product categories
      description: Get all categories of products
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/categories/{categoryId}:
    get:
      tags: [General]
      summary: Get a product category
      description: Get details of a product category
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the product category
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Category not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/notifications:
    get:
      tags: [General]
      summary: Get notifications
      description: Get the notifications of the user
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1          
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/notifications/unread:
    get:
      tags: [General]
      summary: Get unread notifications
      description: Get all unread notifications of the user 
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/notifications/undelivered:
    get:
      tags: [General]
      summary: Get undelivered notifications
      description: Get all undelivered notifications of the user
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/notifications/{notificationId}:
    get:
      tags: [General]
      summary: Get a notification
      description: Get a notification of the user
      parameters:
        - name: notificationId
          in: path
          description: The ID of the notification
          required: true
          schema:
            type: integer
            example: 1   
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Notification not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/notifications/{notificationId}/read:
    put:
      tags: [General]
      summary: Mark a notification as read
      description: For marking a notification as read
      parameters:
        - name: notificationId
          in: path
          required: true
          description: The ID of the notification
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Notification not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/notifications/{notificationId}/delivered:
    put:
      tags: [General]
      summary: Mark a notification as delivered
      description: For marking a notification as delivered
      parameters:
        - name: notificationId
          in: path
          required: true
          description: The ID of the notification
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Notification not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/messages:
    get:
      tags: [General]
      summary: Get messages
      description: Get the messages of the user
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1     
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    post:
      tags: [General]
      summary: Send a message
      description: For sending a message to a user
      requestBody:
        description: Data for Sending a message
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  description: The user ID of the receiver
                  type: integer
                message:
                  description: The message being sent
                  type: string
              required: [to, message]
              example:
                to: 1
                message: Hope my order is on the way
        required: true
      responses:
        '201':
          description: Message created
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/messages/unread:
    get:
      tags: [General]
      summary: Get unread messages (To be used only for the recipients)
      description: Get all unread messages of the user (To be used only for the recipients)
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/messages/undelivered:
    get:
      tags: [General]
      summary: Get undelivered messages (To be used only for the senders)
      description: Get all undelivered messages of the user (To be used only for the senders)
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/messages/{messageId}:
    get:
      tags: [General]
      summary: Get a message (To be used only for the senders)
      description: Get a message of the user (To be used only for the senders)
      parameters:
        - name: messageId
          in: path
          description: The ID of the message
          required: true
          schema:
            type: integer
            example: 1   
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Message not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/messages/{messageId}/read:
    put:
      tags: [General]
      summary: Mark a message as read (To be used only for the recipients)
      description: For marking a message as read (To be used only for the recipients)
      parameters:
        - name: messageId
          in: path
          required: true
          description: The ID of the message
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Message not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/messages/{messageId}/delivered:
    put:
      tags: [General]
      summary: Mark a message as delivered (To be used only for the recipients)
      description: For marking a message as delivered (To be used only for the recipients)
      parameters:
        - name: messageId
          in: path
          required: true
          description: The ID of the message
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Message not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/transactions:
    get:
      tags: [General]
      summary: Get transactions
      description: Get the transactions of the user
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1  
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/transactions/{transactionId}:
    get:
      tags: [General]
      summary: Get a transaction
      description: Get a transaction belonging to the authenticated user
      parameters:
        - name: transactionId
          in: path
          description: The ID of the transaction
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Transaction not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/directions:
    get:
      tags: [Google]
      summary: Get directions data from origin to destination
      description: Get directions data from origin to destination through optional waypoints
      parameters:
        - name: origin
          in: query
          required: true
          description: The origin address
          schema:
            type: string
            example: '2 Allen avenue, Ikeja'
        - name: destination
          in: query
          required: true
          description: The origin address
          schema:
            type: string
            example: 3 Community road, Ikeja
        - name: waypoints[]
          in: query
          required: false
          description: The stopovers address to pass through
          schema:
            type: array
            items:
              type: string
              example: 2 Independence Street, Ikeja
      responses:
        '200':
          description: Okay
        '400':
          description: Too many waypoints, Request route too long, Invalid request, Usage cap exceeded, 
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden, Request denied by Google, 
        '404':
          description: One of the locations was not found, No route between origin and destination, 
        '422':
          description: Validation errors
        '429':
          description: Too many requests to Google, 
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/geocoding:
    get:
      tags: [Google]
      summary: Get coordinates of an address
      description: Get the coodinates of an address
      parameters:
        - name: address
          in: query
          required: true
          description: The address to look up
          schema:
            type: string
            example: '2 Allen avenue, Ikeja'
      responses:
        '200':
          description: Okay
        '400':
          description: Invalid request
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Out of quota, Request denied by Google, 
        '404':
          description: No results found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/geocoding/reverse:
    get:
      tags: [Google]
      summary: Get address from coordinates
      description: Get the address from coordinates (latitude and longitude)
      parameters:
        - name: latitude
          in: query
          required: true
          description: The latitude to look up for
          schema:
            type: number
            example: 6.605282900000001
        - name: longitude
          in: query
          required: true
          description: The longitude to look up for
          schema:
            type: number
            example: 3.3500353
      responses:
        '200':
          description: Okay
        '400':
          description: Invalid request
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Out of quota, Request denied by Google, 
        '404':
          description: No results found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/geolocation:
    get:
      tags: [Google]
      summary: Get geolocation of the user
      description: Get the coordinates of the user
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '400':
          description: Invalid request
        '403':
          description: User not verified, Daily limit exceeded, Invalid API key from backend, Rate limit exceeded, 
        '404':
          description: No results found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/register:
    post:
      tags: [Customer]
      summary: Customer registration
      description: Register as a customer
      requestBody:
        description: Data for registration
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  description: First name of the user
                  type: string
                  example: prince
                last_name:
                  description: Last name of the user
                  type: string
                  example: charles
                business_name:
                  description: The business name of the user (Required if 'used_for' is 'business')
                  type: string
                email:
                  description: The email of the user
                  type: string
                  example: user@handova.com
                phone:
                  description: The phone number of the user
                  type: string
                  example: '08111111111'
                password:
                  description: The password of the user
                  type: string
                  format: password
                  example: secret
                password_confirmation:
                  description: The password confirmation of the user
                  type: string
                  format: password
                  example: secret
                used_for:
                  description: The use of the application. Any of "business" or "personal"
                  type: string
                  example: personal
                hear_about_us_from:
                  description: Where the user heared about Handova from
                  type: string
                  example: facebook
              required: [first_name, last_name, email, phone, password, password_confirmation, used_for]
        required: true
      responses:
        '201':
          description: Registration successful
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/customers/profile:
    put:
      tags: [Customer]
      summary: Update profile
      description: Update the profile of a customer
      requestBody:
        description: Data for Profile updating
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  description: First name of the user
                  type: string
                  example: prince
                last_name:
                  description: Last name of the user
                  type: string
                  example: charles
                business_name:
                  description: The name of the business (Required if application is used for business)
                  type: string
                  example: Handova Limited
                email:
                  description: Email of the user
                  type: string
                  example: princecharles@handova.com
                phone:
                  description: The phone number of the user
                  type: string
                  example: '08011111111'
              required: [first_name, last_name, email, phone]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/accounts/credit:
    post:
      tags: [Customer]
      summary: Credit user's account (For Development Purposes)
      description: Credit the account of the customer (For Development Purposes)
      requestBody:
        description: Data required to create category
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                amount:
                  description: Top up amount (Value is in Kobo)
                  type: integer
                  example: 200000
              required: [amount]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/ratings:
    get:
      tags: [Customer]
      summary: Get ratings
      description: Get the ratings rated by the customer
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1 
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    post:
      tags: [Customer]
      summary: Rate a driver
      description: For rating a driver
      requestBody:
        description: Data for rating driver
        content:
          application/json:
            schema:
              type: object
              properties:
                driver_id:
                  description: The user ID of the driver
                  type: integer
                stars:
                  description: The star rating between 1 - 5
                  type: integer
                comment:
                  description: Additional comment for the driver
                  type: string
              required: [driver_id, stars]
              example:
                driver_id: 1
                stars: 4
                comment: He is cool by the way
        required: true
      responses:
        '201':
          description: Rating added
        '400':
          description: Invalid request
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/ratings/{ratingId}:
    get:
      tags: [Customer]
      summary: Get a rating
      description: Get a rating on a driver
      parameters:
        - name: ratingId
          in: path
          required: true
          description: The ID of the rating
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Rating not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    put:
      tags: [Customer]
      summary: Update rating
      description: Update the rating on a driver
      parameters:
        - name: ratingId
          in: path
          required: true
          description: The ID of the rating
          schema:
            type: integer
            example: 1
      requestBody:
        description: Data for updating rating
        content:
          application/json:
            schema:
              type: object
              properties:
                stars:
                  description: The star rating between 1 - 5 
                  type: integer
                comment:
                  description: Additional comment for the driver
                  type: string
              required: [stars]
              example:
                stars: 4
                comment: He is cool by the way
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Rating not found, Driver not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    delete:
      tags: [Customer]
      summary: Delete a rating
      description: Delete a rating on a driver
      parameters:
        - name: ratingId
          in: path
          required: true
          description: The ID of the rating
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Rating not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/orders:
    get:
      tags: [Customer]
      summary: Get all orders
      description: Get all orders requested by a user
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1 
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    post:
      tags: [Customer]
      summary: Create an order
      description: Create an order
      requestBody:
        description: Data for order creation
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pickup_location:
                  description: The pickup location
                  type: string
                  example: 2 Allen avenue, Ikeja
                vehicle_id:
                  description: The ID of the vehicle
                  type: integer
                  example: 1
                type:
                  description: The type of order. Any of "sending" or "receiving"
                  type: string
                  example: sending
                category:
                  description: The products category
                  type: string
                  example: furnitures
                sender_name:
                  description: The name of the sender
                  type: string
                  example: Benson James
                sender_address:
                  description: Address of the sender
                  type: string
                  example: 3 Ogundana street, Ikeja
                sender_email:
                  description: The email of the sender
                  type: string
                  example: sender@handova.com
                sender_phone:
                  description: Phone number of the sender
                  type: string
                  example: '08133333333'
                images[]:
                  description: The images of the items
                  type: array
                  items:
                    type: string
                    format: binary
                receivers[]:
                  description: The list of receivers details
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the receiver
                        example: Sharon Stone
                      phone:
                        type: string
                        description: Phone number of the receiver
                        example: '081111111111'
                      address:
                        type: string
                        description: The address of the receiver
                        example: 7 Ogundana Street, Ikeja
                      items:
                        type: string
                        description: The items to deliver to the receiver (It is optional)
                        example: Refridgerator
                      email:
                        type: string
                        description: The email of the receiver (It is optional)
                        example: handova@example
                      image:
                        type: string
                        description: The image of the item
                        format: binary
                      quantity:
                        type: integer
                        description: The quantity of the items (It is optional)
                        example: 1
                      weight:
                        type: number
                        description: The weight of the items (It is optional)
                        example: 1.3
                      delivery_note:
                        type: string
                        description: Additional delivery notes for the delivery (It is optional)
                        example: Refridgerators are cool
                payment_method:
                  description: The payment method. Any of "wallet" or "card"
                  type: string
                  example: wallet
                card:
                  description: The ID of the card (Required if "payment_method" is "card")
                  type: integer
                  example: 1
              required:
                - pickup_location
                - vehicle_id
                - category
                - type
                - sender_name
                - sender_address
                - sender_email
                - sender_phone
                - receivers[]
                - payment_method
                - images[]
            encoding:
              receivers[]:
                contentType: application/json
                style: form
                explode: true
                allowReserved: true
        required: true
      responses:
        '201':
          description: Order created
        '400':
          description: Insufficient balance, Too many waypoints, Long request route, Invalid request, Usage cap exceeded, Driver has unregistered ride, Driver offline
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: One of the locations was not found, No route found between origin and destination, Driver non existent or not valid
        '422':
          description: Validation errors
        '429':
          description: Too many requests to Google
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/customers/orders/estimation:
    get:
      tags: [Customer]
      summary: Get order estimation
      description: Get the estimation on an order
      parameters:
        - name: origin
          in: query
          description: The origin address
          required: true
          schema:
            type: string
            example: 3 Allen Avenue, Ikeja
        - name: destinations
          in: query
          description: The delivery location addresses (It should be a JSON array of addresses)
          required: true
          schema:
            type: string
            example: '["2 Independence street, Ikeja", "3 Ogundana Street, Ikeja"]'
        - name: vehicle_id
          in: query
          description: The ID of the vehicle
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '400':
          description: Too many waypoints, Request route too long, Invalid request, Usage cap exceeded, 
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden, Request denied by Google, 
        '404':
          description: One of the locations was not found, No route between origin and destination, 
        '422':
          description: Validation errors
        '429':
          description: Too many requests to Google, 
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/customers/orders/active:
    get:
      tags: [Customer]
      summary: Get current active order
      description: Get current active order
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/customers/orders/{orderId}:
    parameters:
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
            example: 1
    get:
      tags: [Customer]
      summary: Get an order
      description: Get an order by the authenticated user
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Order not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    put:
      tags: [Customer]
      summary: Assign order to new driver
      description: Assign the order to a new driver
      requestBody:
        description: Data required to update order
        content:
          application/json:
            schema:
              type: object
              properties:
                driver_id:
                  description: The ID of the driver
                  type: integer
                  example: 1
              required: [driver_id]
        required: true
      responses:
        '200':
          description: Okay
        '400':
          description: Insufficient balance, Driver does not have a registered ride, Driver offline
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver non existent or not a valid driver
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/orders/{orderId}/track:
    get:
      tags: [Customer]
      summary: Track an order
      description: Get the current location of your order
      parameters:
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '400':
          description: Driver offline
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Order not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/orders/{orderId}/arrival-time:
    get:
      tags: [Customer]
      summary: Get arrival time of a driver
      description: Get the arrival time of a driver
      parameters:
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '400':
          description: Order not in accepted state
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Order not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/orders/{orderId}/rate:
    post:
      tags: [Customer]
      summary: Rate an order
      description: Apply rating on an order
      parameters:
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Data required to rate an order
        content:
          application/json:
            schema:
              type: object
              properties:
                stars:
                  description: The star rating between 1 - 5
                  type: integer
                  example: 1
                comment:
                  description: Additional comment relating to order
                  type: string
                  example: Swift delivery process
              required: [stars]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Order not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/orders/{orderId}/cancel:
    post:
      tags: [Customer]
      summary: Cancel an order
      description: Cancel an order
      parameters:
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Data required to cancel an order
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  description: The reason behind order cancellation
                  type: string
                  example: I made an order by mistake
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Order not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/orders/drivers/search:
    get:
      tags: [Customer]
      summary: Search for nearby drivers
      description: For searching for nearby drivers
      parameters:
        - name: origin
          in: query
          description: The origin address by the user
          required: true
          schema:
            type: string
            example: 2 Allen Avenue, Ikeja
        - name: destination
          in: query
          description: The destination address of the user
          required: true
          schema:
            type: string
            example: 3 Ogundana street, Allen avenue, Ikeja
        - name: vehicle_id
          in: query
          description: The ID of the type of vehicle
          required: true
          schema:
            type: integer
            example: 1
        - name: search_radius
          in: query
          description: The search radius in kilometres
          required: false
          schema:
            type: number
            example: 2
      responses:
        '200':
          description: Okay
        '400':
          description: Max waypoints exceeded, Request route too long, Invalid request, Over daily limit
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden, Request denied by Google
        '404':
          description: No nearby drivers found, One of origin or destination not found, No route found between origin and destination
        '422':
          description: Validation errors
        '429':
          description: Over query limit
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/customers/orders/vehicles/search:
    get:
      tags: [Customer]
      summary: Get delivery data from vehicles
      description: Get delivery data from different types of vehicles
      parameters:
        - name: origin
          in: query
          description: The origin address by the user
          required: true
          schema:
            type: string
            example: 2 Allen Avenue, Ikeja
        - name: destination
          in: query
          description: The destination address of the user
          required: true
          schema:
            type: string
            example: 3 Ogundana street, Allen avenue, Ikeja
      responses:
        '200':
          description: Okay
        '400':
          description: Max waypoints exceeded, Request route too long, Invalid request, Over daily limit
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden, Request denied by Google
        '404':
          description: No nearby drivers found, One of origin or destination not found, No route found between origin and destination
        '422':
          description: Validation errors
        '429':
          description: Over query limit
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/customers/cards:
    get:
      tags: [Customer]
      summary: Get cards
      description: Get cards by a customer
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/customers/cards/{cardId}:
    parameters:
      - name: cardId
        in: path
        description: The ID of the card
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags: [Customer]
      summary: Get a card
      description: Get a card by a customer
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Card not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    delete:
      tags: [Customer]
      summary: Delete a card
      description: Delete a card by a customer
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Card not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/register:
    post:
      tags: [Driver]
      summary: Driver registration
      description: For the registration of drivers
      requestBody:
        description: Data required to register driver
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  description: First name of the user
                  type: string
                  example: prince
                last_name:
                  description: Last name of the user
                  type: string
                  example: charles
                email:
                  description: Email of the user
                  type: string
                  example: princecharles@handova.com
                phone:
                  description: Phone number of the user
                  type: string
                  example: '08111111111'
                password:
                  description: Password of the user
                  type: string
                  format: password
                  example: secret
                password_confirmation:
                  description: Password confirmation of the user
                  type: string
                  format: password
                  example: secret
                date_of_birth:
                  description: Date of birth of the user in the format YYYY-MM-DD
                  type: string
                  format: date
                  example: '1990-10-01'
                home_address:
                  description: Home address of the user
                  type: string
                  example: 2 Allen avenue, Ikeja
                next_of_kin_first_name:
                  description: First name of next of kin
                  type: string
                  example: megan
                next_of_kin_last_name:
                  description: Last name of next of kin
                  type: string
                  example: charles
                next_of_kin_relationship:
                  description: Relationship with the next of kin
                  type: string
                  example: wife
                next_of_kin_phone:
                  description: Phone number of next of kin
                  type: string
                  example: '08122222222'
                next_of_kin_email:
                  description: Email of next of kin
                  type: string
                  example: megancharles@handova.com
                next_of_kin_home_address:
                  description: Home address of next of kin
                  type: string
                  example: 3 Community Road, Ikeja
              required: [first_name, last_name, email, phone, password, password_confirmation, date_of_birth, home_address, next_of_kin_first_name, next_of_kin_last_name, next_of_kin_relationship, next_of_kin_email, next_of_kin_phone, next_of_kin_home_address]
        required: true
      responses:
        '201':
          description: Registration successful
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/drivers/register/ride:
    post:
      tags: [Driver]
      summary: Driver ride registration
      description: For the ride registration of drivers
      requestBody:
        description: Data required to register driver's ride
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                vehicle_type:
                  description: The ID of the vehicle category the user's ride will belong to
                  type: integer
                  example: 1
                brand:
                  description: The brand of the vehicle
                  type: string
                  example: Toyota
                model:
                  description: The model of the vehicle
                  type: string
                  example: Camry
                vehicle_plate_number:
                  description: The plate number of the user's ride
                  type: string
                  example: IHDKD334
                drivers_license_number:
                  description: The unique number of the driver's license
                  type: string
                  example: '993883990393'
                drivers_license_image:
                  description: The driver's license image (Must be of type .jpg, .jpeg, .png)
                  type: string
                  format: binary
                drivers_license_expiration_date:
                  description: The expiration date of the drivers license in the format (YYYY-MM-DD)
                  type: string
                  format: date
                  example: '2023-01-01'
                selfie:
                  description: The image selfie of the Driver (Must be of type .jpg, .jpeg, .png)
                  type: string
                  format: binary
                valid_utility_bill:
                  description: The image of a valid utility bill (Must be of type .jpg, .jpeg, .png or .pdf)
                  type: string
                  format: binary
                valid_insurance_documents[]:
                  description: The insurance documents (Must be of type .jpg, .jpeg, .png or .pdf)
                  type: array
                  items:
                    type: string
                    format: binary
                valid_inspection_reports[]:
                  description: The inspection reports (Must be of type .jpg, .jpeg, .png or .pdf)
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - vehicle_type
                - brand
                - model
                - vehicle_plate_number
                - drivers_license_number
                - drivers_license_image
                - valid_insurance_documents[]
                - valid_utility_bill
                - valid_inspection_reports[]
                - drivers_license_expiration_date
                - selfie
        required: true
      responses:
        '201':
          description: Ride registration successful
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: [] 
  /api/drivers/profile:
    put:
      tags: [Driver]
      summary: Update profile
      description: Update the profile of a driver
      requestBody:
        description: Data for Profile updating
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  description: First name of the user
                  type: string
                  example: prince
                last_name:
                  description: Last name of the user
                  type: string
                  example: charles
                email:
                  description: Email of the user
                  type: string
                  example: princecharles@handova.com
                phone:
                  description: The phone number of the user
                  type: string
                  example: '08011111111'
                date_of_birth:
                  description: Date of birth of the user in the format YYYY-MM-DD
                  type: string
                  format: date
                  example: '1990-10-01'
                home_address:
                  description: Home address of the user
                  type: string
                  example: 2 Allen avenue, Ikeja
                next_of_kin_first_name:
                  description: First name of next of kin
                  type: string
                  example: megan
                next_of_kin_last_name:
                  description: Last name of next of kin
                  type: string
                  example: charles
                next_of_kin_relationship:
                  description: Relationship with the next of kin
                  type: string
                  example: wife
                next_of_kin_phone:
                  description: Phone number of next of kin
                  type: string
                  example: '08122222222'
                next_of_kin_email:
                  description: Email of next of kin
                  type: string
                  example: megancharles@handova.com
                next_of_kin_home_address:
                  description: Home address of next of kin
                  type: string
                  example: 3 Community Road, Ikeja
              required: [first_name, last_name, email, phone, date_of_birth, home_address, next_of_kin_first_name, next_of_kin_last_name, next_of_kin_relationship, next_of_kin_phone, next_of_kin_email, next_of_kin_home_address]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/status:
    get:
      tags: [Driver]
      summary: Get registration status
      description: Get the status of the registration of a driver
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/rides:
    post:
      tags: [Driver]
      summary: Update ride details (Will need Admin approval after updating details)
      description: Update the ride details (Will need Admin approval after updating details)
      requestBody:
        description: Data required to create category
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                vehicle_type:
                  description: The ID of the vehicle category the user's ride will belong to
                  type: integer
                  example: 1
                brand:
                  description: The brand of the vehicle
                  type: string
                  example: Toyota
                model:
                  description: The model of the vehicle
                  type: string
                  example: Camry
                plate_number:
                  description: The plate number of the vehicle
                  type: string
                  example: JU74GGE
                valid_insurance_documents[]:
                  description: The insurance documents
                  type: array
                  items:
                    type: string
                    format: binary
                valid_inspection_reports[]:
                  description: The inspection reports (Must be of type .jpg, .jpeg, .png or .pdf)
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - vehicle_type
                - brand
                - model
                - plate_number
                - valid_insurance_documents[]
                - valid_inspection_reports[]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/rides/status:
    get:
      tags: [Driver]
      summary: Check ride registration status
      description: Check the current status of the ride registration
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/jobs:
    get:
      tags: [Driver]
      summary: Get all jobs
      description: Get all jobs by a driver
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1  
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/jobs/{jobId}:
    get:
      tags: [Driver]
      summary: Get a job
      description: Get a job by a driver
      parameters:
        - name: jobId
          in: path
          description: The ID of the job
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Job not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/jobs/{jobId}/accept:
    put:
      tags: [Driver]
      summary: Accept a job
      description: Accept a job
      parameters:
        - name: jobId
          in: path
          description: The ID of the job
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Job not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/jobs/{jobId}/reject:
    put:
      tags: [Driver]
      summary: Reject a job
      description: Reject a job
      parameters:
        - name: jobId
          in: path
          description: The ID of the job
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Job not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/jobs/{jobId}/en-route:
    put:
      tags: [Driver]
      summary: Mark job en route
      description: Mark an job as en route
      parameters:
        - name: jobId
          in: path
          description: The ID of the job
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Job not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/jobs/{jobId}/completed:
    put:
      tags: [Driver]
      summary: Mark job as completed
      description: Mark a job as completed
      parameters:
        - name: jobId
          in: path
          description: The ID of the job
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Job not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/locations:
    put:
      tags: [Driver]
      summary: Update driver's location
      description: Update the current location of a driver
      requestBody:
        description: Data for updating driver location
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                latitude:
                  description: The latitude of the driver
                  type: number
                  example: 3.27783983
                longitude:
                  description: The longitude of the driver
                  type: number
                  example: 4.7663552
              required: [latitude, longitude]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/online:
    get:
      tags: [Driver]
      summary: Check online status
      description: Check if the authenticated user is online or not
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    put:
      tags: [Driver]
      summary: Go online
      description: Switch driver's online status to online
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/offline:
    put:
      tags: [Driver]
      summary: Go offline
      description: Switch driver's online status to offline
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/ratings:
    get:
      tags: [Driver]
      summary: Get all ratings
      description: Get all ratings by customers
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1  
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/ratings/{ratingId}:
    get:
      tags: [Driver]
      summary: Get a rating
      description: Get a particular rating
      parameters:
        - name: ratingId
          in: path
          description: The ID of the rating
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Rating not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/earnings/week:
    get:
      tags: [Driver]
      summary: Get week earnings
      description: Get the earnings of the week
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/withdrawals:
    get:
      tags: [Driver]
      summary: Get withdrawals
      description: Get the withdrawals performed by the user
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    post:
      tags: [Driver]
      summary: Initiate withdrawal request
      description: Make a withdrawal request
      requestBody:
        description: Data for withdrawal request
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  description: The amount to be withdrawn (Value is in Kobo)
                  type: integer
                  example: 1500000
                account_id:
                  description: The ID of the account
                  type: integer
                  example: 1
              required: [amount, account_id]
        required: true
      responses:
        '200':
          description: Okay
        '400':
          description: Insufficient balance
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/banks:
    get:
      tags: [Driver]
      summary: Get banks
      description: Get all banks in the country
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/drivers/banks/{bankId}:
    get:
      tags: [Driver]
      summary: Get a bank
      description: Get a bank in the country
      parameters:
        - name: bankId
          in: path
          description: The ID of the bank
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Bank not found
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/drivers/accounts:
    get:
      tags: [Driver]
      summary: Get accounts
      description: Get all accounts by the authenticated user
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    post:
      tags: [Driver]
      summary: Create an account
      description: Create a new account
      requestBody:
        description: Data for account creation
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                account_number:
                  description: The account number
                  type: number
                  example: '0123456789'
                account_name:
                  description: The account name
                  type: string
                  example: Prince Charles
                bank_code:
                  description: The bank code
                  type: number
                  example: '058'
              required: [account_number, account_name, bank_code]
        required: true
      responses:
        '201':
          description: Account created
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Invalid account details
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/drivers/accounts/verify:
    get:
      tags: [Driver]
      summary: Verify account number
      description: Verify the account number of a user
      parameters:
        - name: account_number
          in: query
          description: The account number of the user
          required: true
          schema:
            type: string
            example: '0140940818'
        - name: bank_code
          in: query
          description: The bank code
          required: true
          schema:
            type: string
            example: '058'
      responses:
        '200':
          description: Okay
        '400':
          description: Invalid request
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/drivers/accounts/{accountId}:
    parameters:
        - name: accountId
          in: path
          description: The ID of the account
          required: true
          schema:
            type: integer
            example: 1
    get:
      tags: [Driver]
      summary: Get an account
      description: Get an account by the authenticated user
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Account not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    delete:
      tags: [Driver]
      summary: Delete an account
      description: Delete an account by the authenticated user
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '404':
          description: Account not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/register:
    post:
      tags: [Administrator]
      summary: Register as an Admin (For Development Purposes)
      description: Registration for the role of Administrator (For Development Purposes)
      requestBody:
        description: Data required to register as an administrator
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  description: The first name of the user
                  type: string
                  example: prince
                last_name:
                  description: The last name of the user
                  type: string
                  example: charles
                email:
                  description: The email of the user
                  type: string
                  example: admin@handova.com
                phone:
                  description: The phone number of the user
                  type: string
                  example: '08111111111'
                password:
                  description: The password of the user
                  type: string
                  format: password
                  example: secret
                password_confirmation:
                  description: The password confirmation of the user
                  type: string
                  format: password
                  example: secret
              required: [first_name, last_name, email, phone, password, password_confirmation]
        required: true
      responses:
        '201':
          description: Admin registration successful
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/admin/login:
    post:
      tags: [Administrator]
      summary: Login as an administrator
      description: Login for administrators only
      requestBody:
        description: Data for login an administrator
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  description: Phone number or email of the administrator
                  type: string
                  example: handova@example.com
                password:
                  description: Password of the administrator
                  type: string
                  format: password
                  example: secret
              required: [username, password]
        required: true
      responses:
        '200':
          description: Okay
        '400':
          description: Invalid username and password
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
  /api/admin/profile:
    put:
      tags: [Administrator]
      summary: Update profile
      description: Update the profile of an administrator
      requestBody:
        description: Data for Profile updating
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  description: First name of the user
                  type: string
                  example: ken
                last_name:
                  description: Last name of the user
                  type: string
                  example: james
                email:
                  description: Email of the user
                  type: string
                  example: ken@handova.com
                phone:
                  description: The phone number of the user
                  type: string
                  example: '08011111111'
              required: [first_name, last_name, email, phone]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/users/active:
    get:
      tags: [Administrator]
      summary: Get active users
      description: Get all active users
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/users/blocked:
    get:
      tags: [Administrator]
      summary: Get blocked users
      description: Get all blocked users
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/users/{userId}:
    get:
      tags: [Administrator]
      summary: Get a user
      description: Get a registered user
      parameters:
        - name: userId
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: User not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/users/{userId}/activate:
    put:
      tags: [Administrator]
      summary: Activate a user's account
      description: Activate the account of a user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: User not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/users/{userId}/block:
    put:
      tags: [Administrator]
      summary: Block a user's account
      description: Block the account of a user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: User not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/users/{userId}/notify:
    post:
      tags: [Administrator]
      summary: Send push notification to a user
      description: Send a push notification to a user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: integer
            example: 1
      requestBody:
        description: Data required to send push notification
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  description: The title of the notification
                  type: string
                  example: Welcome to Handova
                message:
                  description: The message concealed in the notification
                  type: string
                  example: We are glad to welcome you to our platform
              required: [title, message]
        required: true
      responses:
        '200':
          description: Okay
        '400':
          description: Invalid registration token, Invalid package name, Message too big, Invalid data key, Invalid TTL, Invalid Parameters
        '401':
          description: Unauthenticated, APNs certificate or web push auth key invalid or missing
        '403':
          description: User not verified, Forbidden, Sender ID mismatch
        '404':
          description: User not found, Missing registration, Not registered
        '422':
          description: Validation errors
        '429':
          description: Quota exceeded
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/admin/users/{userId}/mail:
    post:
      tags: [Administrator]
      summary: Send mail to a user
      description: Send a mail to a user
      parameters:
        - name: userId
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Data required to send mail to a user
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  description: The subject of the mail
                  type: string
                  example: New message from Handova
                message:
                  description: The content of the email
                  type: string
                  example: We are pleased to have you in our team
              required: [subject, message]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: User not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/users/{userId}/sms:
    post:
      tags: [Administrator]
      summary: Send SMS to a user
      description: Send an SMS to a user
      parameters:
        - name: userId
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Data required to send SMS to a user
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  description: The content of the SMS
                  type: string
                  example: We welcome you to our Handova
              required: [message]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: User not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/categories:
    post:
      tags: [Administrator]
      summary: Create category
      description: Create a category of products
      requestBody:
        description: Data required to create category
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the category
                  type: string
              required: [name]
              example:
                name: electronics
        required: true
      responses:
        '201':
          description: Category created
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/categories/{categoryId}:
    put:
      tags: [Administrator]
      summary: Update category
      description: Update a category of products
      parameters:
        - name: categoryId
          in: path
          description: The ID of the category
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Data required to update category
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the category
                  type: string
              required: [name]
              example:
                name: electronics
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Category not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete category
      description: Delete a category of products
      parameters:
        - name: categoryId
          in: path
          description: The ID of the category
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Category not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/vehicles:
    post:
      tags: [Administrator]
      summary: Create a vehicle category
      description: Create a vehicle category which driver rides will belong to
      requestBody:
        description: Data required to create a vehicle category
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  description: The name of the vehicle category
                  type: string
                  example: Bikes
                average_speed_km_per_hour:
                  description: The average speed of the vehicle category in km/h
                  type: integer
                  example: 56
                amount_per_km:
                  description: The amount to be paid on vehicles in this category per km. Value is in Kobo
                  type: integer
                  example: 1000000
                image:
                  description: The image to show in the application
                  type: string
                  format: binary
              required: [name, average_speed_km_per_hour, amount_per_km]
        required: true
      responses:
        '201':
          description: Vehicle created
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/vehicles/{vehicleId}:
    parameters:
      - name: vehicleId
        in: path
        required: true
        description: The ID of the vehicle category
        schema:
          type: integer
          example: 1
    post:
      tags: [Administrator]
      summary: Update a vehicle category
      description: Update a vehicle category which driver rides will belong to
      requestBody:
        description: Data required to create a vehicle category
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  description: The name of the vehicle category
                  type: string
                  example: Bikes
                average_speed_km_per_hour:
                  description: The average speed of the vehicle category in km/h
                  type: integer
                  example: 56
                amount_per_km:
                  description: The amount to be paid on vehicles in this category per km. Value is in Kobo
                  type: integer
                  example: 1000000
                image:
                  description: The image to show in the application
                  type: string
                  format: binary
              required: [name, average_speed_km_per_hour, amount_per_km]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Vehicle category not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete a vehicle category
      description: Delete a vehicle category
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Vehicle category not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/vehicles/{vehicleId}/enable:
    parameters:
      - name: vehicleId
        in: path
        required: true
        description: The ID of the vehicle category
        schema:
          type: integer
          example: 1
    post:
      tags: [Administrator]
      summary: Enable a vehicle category
      description: Enable a vehicle and make it available
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Vehicle category not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/vehicles/{vehicleId}/disable:
    parameters:
      - name: vehicleId
        in: path
        required: true
        description: The ID of the vehicle category
        schema:
          type: integer
          example: 1
    post:
      tags: [Administrator]
      summary: Disable a vehicle category
      description: Disable a vehicle and make it unavailable
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Vehicle category not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/vehicle-brands:
    post:
      tags: [Administrator]
      summary: Create a vehicle brand
      description: Create a vehicle brand which driver rides will belong to
      requestBody:
        description: Data required to create a vehicle brand
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the vehicle brand
                  type: string
                  example: Mazda
                type:
                  description: The ID of the vehicle category
                  type: integer
                  example: 1
              required: [name, type]
        required: true
      responses:
        '201':
          description: Vehicle brand created
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/vehicle-brands/{vehicleBrandId}:
    parameters:
      - name: vehicleBrandId
        in: path
        description: The ID of the vehicle brand
        required: true
        schema:
          type: integer
          example: 1
    put:
      tags: [Administrator]
      summary: Update a vehicle brand
      description: Update a vehicle brand which driver rides will belong to
      requestBody:
        description: Data required to update a vehicle brand
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the vehicle brand
                  type: string
                  example: Mazda
                type:
                  description: The ID of the vehicle category
                  type: integer
                  example: 1
              required: [name, type]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Vehicle model not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete a vehicle brand
      description: Delete a vehicle brand
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Vehicle brand not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/vehicle-models:
    post:
      tags: [Administrator]
      summary: Create a vehicle model
      description: Create a vehicle model which driver rides will belong to
      requestBody:
        description: Data required to create a vehicle model
        content:
          application/json:
            schema:
              type: object
              properties:
                brand:
                  description: The ID of the vehicle brand
                  type: integer
                  example: 1
                name:
                  description: The name of the vehicle model
                  type: string
                  example: GX500
              required: [brand, name]
        required: true
      responses:
        '201':
          description: Vehicle model created
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/vehicle-models/{vehicleModelId}:
    parameters:
      - name: vehicleModelId
        in: path
        description: The ID of the vehicle model
        required: true
        schema:
          type: integer
          example: 1
    put:
      tags: [Administrator]
      summary: Update a vehicle model
      description: Update a vehicle model which driver rides will belong to
      requestBody:
        description: Data required to update a vehicle model
        content:
          application/json:
            schema:
              type: object
              properties:
                brand:
                  description: The ID of the vehicle brand
                  type: integer
                  example: 1
                name:
                  description: The name of the vehicle model
                  type: string
                  example: GX500
              required: [brand, name]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Vehicle model not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete a vehicle model
      description: Delete a vehicle model
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Vehicle model not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/customers:
    get:
      tags: [Administrator]
      summary: Get all customers
      description: Get all registered customers
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/customers/total:
    get:
      tags: [Administrator]
      summary: Get total number of customers
      description: Get the total number of customers
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/customers/month-leaders:
    get:
      tags: [Administrator]
      summary: Get the top customers for a month
      description: Get the top customers for a month
      parameters:
        - name: month
          in: query
          description: The month for the query. Valid values 1 - 12 (January - December)
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/customers/all-time-leaders:
    get:
      tags: [Administrator]
      summary: Get the top customers of all time
      description: Get the top customers of all time
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/customers/registered:
    get:
      tags: [Administrator]
      summary: Get the count of the registered customers for the year
      description: Get the count of the registered customers for the year
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/customers/{customerId}:
    get:
      tags: [Administrator]
      summary: Get a customer
      description: Get a registered customer
      parameters:
        - name: customerId
          in: path
          description: The user ID of the customer
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Customer not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/customers/{customerId}/orders:
    get:
      tags: [Administrator]
      summary: Get all orders by a customer
      description: Get all the orders by a customer
      parameters:
        - name: customerId
          in: path
          description: The user ID of the customer
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Customer not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/customers/{customerId}/orders/{orderId}:
    get:
      tags: [Administrator]
      summary: Get an order by a customer
      description: Get a particular order by a customer
      parameters:
        - name: customerId
          in: path
          description: The user ID of the customer
          required: true
          schema:
            type: integer
            example: 1
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Customer not found, Order not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/customers/{customerId}/transactions:
    get:
      tags: [Administrator]
      summary: Get all transactions by a customer
      description: Get all the transactions by a customer
      parameters:
        - name: customerId
          in: path
          description: The user ID of the customer
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Customer not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/customers/{customerId}/transactions/{transactionId}:
    get:
      tags: [Administrator]
      summary: Get a transaction by a customer
      description: Get a particular transaction by a customer
      parameters:
        - name: customerId
          in: path
          description: The user ID of the customer
          required: true
          schema:
            type: integer
            example: 1
        - name: transactionId
          in: path
          description: The ID of the transaction
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Customer not found, Transaction not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers:
    get:
      tags: [Administrator]
      summary: Get all drivers
      description: Get all registered drivers
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/total:
    get:
      tags: [Administrator]
      summary: Get total number of drivers
      description: Get the total number of drivers
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/online:
    get:
      tags: [Administrator]
      summary: Get all online drivers
      description: Get all online valid drivers
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/offline:
    get:
      tags: [Administrator]
      summary: Get all offline drivers
      description: Get all offline valid drivers
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/approved:
    get:
      tags: [Administrator]
      summary: Get approved drivers
      description: Get all approved drivers
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/unapproved:
    get:
      tags: [Administrator]
      summary: Get unapproved drivers
      description: Get all unapproved drivers
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/rejected:
    get:
      tags: [Administrator]
      summary: Get rejected drivers
      description: Get all rejected drivers
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/month-leaders:
    get:
      tags: [Administrator]
      summary: Get the top drivers for a month
      description: Get the top drivers for a month
      parameters:
        - name: month
          in: query
          description: The month for the query. Valid values 1 - 12 (January - December)
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/all-time-leaders:
    get:
      tags: [Administrator]
      summary: Get the top drivers of all time
      description: Get the top drivers of all time
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/registered:
    get:
      tags: [Administrator]
      summary: Get the count of the registered drivers for the year
      description: Get the count of the registered drivers for the year
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}:
    get:
      tags: [Administrator]
      summary: Get a driver
      description: Get a registered driver
      parameters:
        - name: driverId
          in: path
          description: The user ID of the driver
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/approve:
    put:
      tags: [Administrator]
      summary: Approve a driver
      description: Approve a driver after background check
      parameters:
        - name: driverId
          in: path
          required: true
          description: The user ID of the driver
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/reject:
    put:
      tags: [Administrator]
      summary: Reject a driver
      description: Reject a driver after background check
      parameters:
        - name: driverId
          in: path
          required: true
          description: The user ID of the driver
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/rides/approve:
    put:
      tags: [Administrator]
      summary: Approve a driver's ride
      description: Approve the ride of a driver
      parameters:
        - name: driverId
          in: path
          required: true
          description: The user ID of the driver
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found, Driver's ride not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/rides/reject:
    put:
      tags: [Administrator]
      summary: Reject a driver's ride
      description: Reject the ride of a driver
      parameters:
        - name: driverId
          in: path
          required: true
          description: The user ID of the driver
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found, Driver's ride not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/track:
    get:
      tags: [Administrator]
      summary: Track a driver
      description: Get the current location of a driver
      parameters:
        - name: driverId
          in: path
          required: true
          description: The user ID of the driver
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/activate:
    put:
      tags: [Administrator]
      summary: Activate a driver
      description: Activate the driver to be seen by potential customers
      parameters:
        - name: driverId
          in: path
          required: true
          description: The user ID of the driver
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/ratings:
    get:
      tags: [Administrator]
      summary: Get ratings on a driver
      description: Get ratings on a driver
      parameters:
        - name: driverId
          in: path
          required: true
          description: The user ID of the driver
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/ratings/{ratingId}:
    get:
      tags: [Administrator]
      summary: Get a rating on a driver
      description: Get a particular rating on a driver
      parameters:
        - name: driverId
          in: path
          required: true
          description: The user ID of the driver
          schema:
            type: integer
            example: 1
        - name: ratingId
          in: path
          required: true
          description: The ID of the rating
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found, Rating not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/jobs:
    get:
      tags: [Administrator]
      summary: Get all jobs by a driver
      description: Get all the jobs by a driver
      parameters:
        - name: driverId
          in: path
          description: The user ID of the driver
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/jobs/{jobId}:
    get:
      tags: [Administrator]
      summary: Get a job by a driver
      description: Get a particular job by a driver
      parameters:
        - name: driverId
          in: path
          description: The user ID of the driver
          required: true
          schema:
            type: integer
            example: 1
        - name: jobId
          in: path
          description: The ID of the job
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found, job not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/transactions:
    get:
      tags: [Administrator]
      summary: Get all transactions by a driver
      description: Get all the transactions by a driver
      parameters:
        - name: driverId
          in: path
          description: The user ID of the driver
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/transactions/{transactionId}:
    get:
      tags: [Administrator]
      summary: Get a transaction by a driver
      description: Get a particular transaction by a driver
      parameters:
        - name: driverId
          in: path
          description: The user ID of the driver
          required: true
          schema:
            type: integer
            example: 1
        - name: transactionId
          in: path
          description: The ID of the transaction
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found, transaction not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/drivers/{driverId}/license/verify:
    post:
      tags: [Administrator]
      summary: Verify a driver's license
      description: Verify a driver's license by it's number
      parameters:
        - name: driverId
          in: path
          description: The user ID of the driver
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Driver not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders:
    get:
      tags: [Administrator]
      summary: Get all orders
      description: Get all know orders
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/total:
    get:
      tags: [Administrator]
      summary: Get total number of orders
      description: Get the total number of orders
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/today:
    get:
      tags: [Administrator]
      summary: Get today's orders
      description: Get all the orders for the day
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/pending:
    get:
      tags: [Administrator]
      summary: Get pending orders
      description: Get all pending orders
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/pending/monthly:
    get:
      tags: [Administrator]
      summary: Get the count of the pending orders for the year
      description: Get the count of the pending orders for the year
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/accepted:
    get:
      tags: [Administrator]
      summary: Get accepted orders
      description: Get all accepted orders
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/rejected:
    get:
      tags: [Administrator]
      summary: Get rejected orders
      description: Get all rejected orders
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/rejected/monthly:
    get:
      tags: [Administrator]
      summary: Get the count of the rejected orders for the year
      description: Get the count of the rejected orders for the year
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/en-route:
    get:
      tags: [Administrator]
      summary: Get en route orders
      description: Get all en route orders
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/completed:
    get:
      tags: [Administrator]
      summary: Get completed orders
      description: Get all completed orders
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/completed/monthly:
    get:
      tags: [Administrator]
      summary: Get the count of the completed orders for the year
      description: Get the count of the completed orders for the year
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/canceled:
    get:
      tags: [Administrator]
      summary: Get canceled orders
      description: Get all canceled orders
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/canceled/monthly:
    get:
      tags: [Administrator]
      summary: Get the count of the canceled orders for the year
      description: Get the count of the canceled orders for the year
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/{orderId}:
    get:
      tags: [Administrator]
      summary: Get an order
      description: Get an order
      parameters:
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Order not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/orders/{orderId}/track:
    get:
      tags: [Administrator]
      summary: Track an order
      description: Get the current location of a driver by an order
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Order not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/transactions:
    get:
      tags: [Administrator]
      summary: Get all transactions
      description: Get all the transactions of the application
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/transactions/{transactionId}:
    get:
      tags: [Administrator]
      summary: Get a transaction
      description: Get a the transaction by a user
      parameters:
        - name: transactionId
          in: path
          description: The ID of the transaction
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Transaction not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/transactions/{transactionId}/withdrawals/confirm:
    post:
      tags: [Administrator]
      summary: Confirm withdrawal
      description: Confirm the withdrawal request of a driver
      parameters:
        - name: transactionId
          in: path
          description: The ID of the transaction
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '400':
          description: Transaction previously rejected
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Transaction not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/transactions/{transactionId}/withdrawals/reject:
    post:
      tags: [Administrator]
      summary: Reject withdrawal
      description: Reject the withdrawal request
      parameters:
        - name: transactionId
          in: path
          description: The ID of the transaction
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '400':
          description: Transaction previously confirmed
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Transaction not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/notifications:
    get:
      tags: [Administrator]
      summary: Get notifications
      description: Get the notifications belonging to Administrators
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1          
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/notifications/unread:
    get:
      tags: [Administrator]
      summary: Get unread notifications
      description: Get all unread notifications of Administrators 
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/notifications/undelivered:
    get:
      tags: [Administrator]
      summary: Get undelivered notifications
      description: Get all undelivered notifications of Administrators
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/notifications/{notificationId}:
    get:
      tags: [Administrator]
      summary: Get a notification
      description: Get a notification belonging to Administrators
      parameters:
        - name: notificationId
          in: path
          description: The ID of the notification
          required: true
          schema:
            type: integer
            example: 1   
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Notification not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/notifications/{notificationId}/read:
    put:
      tags: [Administrator]
      summary: Mark a notification as read
      description: For marking a notification as read
      parameters:
        - name: notificationId
          in: path
          required: true
          description: The ID of the notification
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Notification not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/notifications/{notificationId}/delivered:
    put:
      tags: [Administrator]
      summary: Mark a notification as delivered
      description: For marking a notification as delivered
      parameters:
        - name: notificationId
          in: path
          required: true
          description: The ID of the notification
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '404':
          description: Notification not found
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/notifications/token/test:
    post:
      tags: [Administrator]
      summary: Send push notification to a token (For Development purposes)
      description: Send a push notification to a token (For Development purposes)
      requestBody:
        description: Data required to send push notification
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  description: The title of the notification
                  type: string
                  example: Welcome to Handova
                message:
                  description: The message concealed in the notification
                  type: string
                  example: We are glad to welcome you to our platform
                token:
                  description: The firebase messaging token
                  type: string
                  example: 36Od3g3XmDzJx2NbNrc35WHp8ErMOUgqkGSTLaa3
                data:
                  description: The data to pass on the notification
                  type: object
                  example: null
              required: [title, message, token]
        required: true
      responses:
        '200':
          description: Okay
        '400':
          description: Invalid registration token, Invalid package name, Message too big, Invalid data key, Invalid TTL, Invalid Parameters
        '401':
          description: Unauthenticated, APNs certificate or web push auth key invalid or missing
        '403':
          description: User not verified, Forbidden, Sender ID mismatch
        '404':
          description: User not found, Missing registration, Not registered
        '422':
          description: Validation errors
        '429':
          description: Quota exceeded
        '500':
          description: Server error. Report to Developer
        '503':
          description: Service unavailable. Try again
      security:
        - httpBearer: []
  /api/admin/reports/monthly:
    post:
      tags: [Administrator]
      summary: Download monthly report
      description: Download the monthly report of transactions
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/reports/weekly:
    post:
      tags: [Administrator]
      summary: Download weekly report
      description: Download the weekly reports of transactions
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/reports/daily:
    post:
      tags: [Administrator]
      summary: Download daily report
      description: Download the daily reports of transactions  
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/reports/hourly:
    post:
      tags: [Administrator]
      summary: Download hourly reports
      description: Download the hourly reports of transactions
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/payments/pending:
    get:
      tags: [Administrator]
      summary: Get pending payments
      description: Get the pending payments of withdrawal requests
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/logo:
    post:
      tags: [Administrator]
      summary: Upload application logo
      description: Upload the official logo of the application
      requestBody:
        description: Data required for uploading logo
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  description: The logo of the application (Must be of format .png)
                  type: string
                  format: binary
              required: [logo]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/search/customers:
    get:
      tags: [Administrator]
      summary: Search customers
      description: Search for customers
      parameters:
        - name: query
          in: query
          description: The search query
          required: true
          schema:
            type: string
            example: Prince
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/search/drivers:
    get:
      tags: [Administrator]
      summary: Search drivers
      description: Search for drivers
      parameters:
        - name: query
          in: query
          description: The search query
          required: true
          schema:
            type: string
            example: Prince
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/search/business:
    get:
      tags: [Administrator]
      summary: Search business
      description: Search for business
      parameters:
        - name: query
          in: query
          description: The search query
          required: true
          schema:
            type: string
            example: Handova
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings:
    get:
      tags: [Administrator]
      summary: Get settings
      description: Get the settings of the application          
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/application:
    post:
      tags: [Administrator]
      summary: Edit application settings
      description: Edit the application settings
      requestBody:
        description: Data required to change the application settings
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the application
                  type: string
                  example: Handova
                version:
                  description: The version of the application
                  type: string
                  example: '1.0.0'
              required: [name, version]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/mail:
    post:
      tags: [Administrator]
      summary: Edit mail settings of application
      description: Edit the mail settings of the application
      requestBody:
        description: Data required to uploading service account file
        content:
          application/json:
            schema:
              type: object
              properties:
                from_address:
                  description: The email address to be display as the sender
                  type: string
                  example: support@handova.co.uk
                from_name:
                  description: The name to be displayed as the sender
                  type: string
                  example: Handova
              required: [from_address, from_name]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/url:
    post:
      tags: [Administrator]
      summary: Edit android and apple URL
      description: Edit the android URL and the apple URL of the application
      requestBody:
        description: Data required to update URLs
        content:
          application/json:
            schema:
              type: object
              properties:
                android:
                  description: The android URL of the application
                  type: string
                  example: https://handova.co.uk/android
                apple:
                  description: The apple URL of the application
                  type: string
                  example: https://handova.co.uk/apple
              required: [android, apple]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/firebase/project:
    post:
      tags: [Administrator]
      summary: Edit firebase settings of the application
      description: Edit the firebase settings of the application
      requestBody:
        description: Data required to edit firebase settings
        content:
          application/json:
            schema:
              type: object
              properties:
                web_api_key:
                  description: The firebase web api key
                  type: string
                  example: i4EmuCUsdqERoTpMD1XN
                project_id:
                  description: The firebase project id
                  type: string
                  example: handova-aaaaa
              required: [web_api_key, project_id]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/firebase/service-account:
    post:
      tags: [Administrator]
      summary: Upload firebase service account file
      description: Upload the firebase service account file for authentication
      requestBody:
        description: Data required to uploading service account file
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                service_account_file:
                  description: The service account file to upload (Must be in .json format)
                  type: string
                  format: binary
              required: [service_account_file]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/google:
    post:
      tags: [Administrator]
      summary: Edit google settings of the application
      description: Edit the google settings of the application
      requestBody:
        description: Data required to edit google settings
        content:
          application/json:
            schema:
              type: object
              properties:
                api_key:
                  description: The google api key
                  type: string
                  example: QLQnRSIxDCAIJEOqBfvZbkcCkY
              required: [api_key]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/paystack:
    post:
      tags: [Administrator]
      summary: Edit paystack settings of the application
      description: Edit the paystack settings of the application
      requestBody:
        description: Data required to edit paystack settings
        content:
          application/json:
            schema:
              type: object
              properties:
                public_key:
                  description: The paystack api key
                  type: string
                  example: pk_test_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
                secret_key:
                  description: The paystack api key
                  type: string
                  example: sk_test_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
              required: [public_key, secret_key]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/sms:
    post:
      tags: [Administrator]
      summary: Edit SMS settings of the application
      description: Edit the SMS settings of the application
      requestBody:
        description: Data required to edit SMS settings
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: The username of the SMS provider
                  type: string
                  example: kelvin
                auth_key:
                  description: The auth key of the SMS provider
                  type: string
                  example: 32RedFI9YKz7e8MuRqtXMpxIJBPb1zcxoF7
              required: [username, auth_key]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/transactions/fee:
    post:
      tags: [Administrator]
      summary: Edit transaction fees
      description: Edit the transaction fees of the application
      requestBody:
        description: Data required to edit transaction fees
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: The type which represents the value (Any of "percentage" or "amount")
                  type: string
                  example: percentage
                value:
                  description: The actual value (If type is "amount", then the value is in kobo)
                  type: number
                  example: 5
              required: [type, value]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/cancellation/fee:
    post:
      tags: [Administrator]
      summary: Edit order cancellation fee
      description: Edit the order cancellation fee of the application
      requestBody:
        description: Data required to edit order cancellation fee
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: The type which represents the value (Any of "percentage" or "amount")
                  type: string
                  example: percentage
                value:
                  description: The actual value (If type is "amount", then the value is in kobo)
                  type: number
                  example: 5
              required: [type, value]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/verify-me:
    post:
      tags: [Administrator]
      summary: Edit Verify Me API settings
      description: Edit the settings of the Verify Me API
      requestBody:
        description: Data required to edit Verify Me API
        content:
          application/json:
            schema:
              type: object
              properties:
                public_key:
                  description: The public key
                  type: string
                  example: pk_test_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                secret_key:
                  description: The secret key
                  type: string
                  example: sk_test_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
              required: [public_key, secret_key]
        required: true
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/settings/reset:
    delete:
      tags: [Administrator]
      summary: Reset settings
      description: Reset the settings of the entire application
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/promo-codes:
    get:
      tags: [Administrator]
      summary: Get promo codes
      description: Get the promo codes
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 1          
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    post:
      tags: [Administrator]
      summary: Create a promo code
      description: Create a promo code
      requestBody:
        description: Data required to create promo code
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  description: The promo code
                  type: string
                  example: PRINCE34
                type:
                  description: The type of promo code (Any of "public", "private" and "restricted")
                  type: string
                  example: public
                value_type:
                  description: The type which represents the value (Any of "percentage" or "amount")
                  type: string
                  example: percentage
                value:
                  description: The value of the promo code
                  type: integer
                  example: 10
                expires_at:
                  description: The expiration date
                  type: string
                  format: date
                  example: 2023-03-14
              required: [code, type, value_type, value, expires_at]
        required: true
      responses:
        '201':
          description: Promo code created
        '401':
          description: Unauthenticated
        '403':
          description: User not verified, Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
  /api/admin/promo-codes/{promoCodeId}:
    parameters:
      - name: promoCodeId
        in: path
        description: The ID of the promo code
        required: true
        schema:
          type: integer
          example: 1   
    get:
      tags: [Administrator]
      summary: Get a promo code
      description: Get a promo code  
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '404':
          description: Promo code not found
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete a promo code
      description: Delete a promo code  
      responses:
        '200':
          description: Okay
        '401':
          description: Unauthenticated
        '404':
          description: Promo code not found
        '403':
          description: User not verified
        '500':
          description: Server error. Report to Developer
      security:
        - httpBearer: []
components:
  securitySchemes:
    httpBearer:
      type: http
      description: Bearer token for authentication
      scheme: bearer
      bearerFormat: JWT